#!/bin/bash
# vim: fdm=marker

set -e

### Functions {{{1

# echo & execute
ee() {
  case "$1" in
    -r) shift; red     "$@" >&2;;
    -g) shift; green   "$@" >&2;;
    -y) shift; yellow  "$@" >&2;;
    --) shift; echo -e "$@" >&2;;
    *)         echo -e "$@" >&2;;
  esac
  "$@"
}

_normal=$(tput -Txterm sgr0)
_red=$(tput -Txterm setaf 1; tput -Txterm bold)
_green=$(tput -Txterm setaf 2)
_yellow=$(tput -Txterm setaf 3)
red()    { echo -e "$_red$*$_normal";    }
green()  { echo -e "$_green$*$_normal";  }
yellow() { echo -e "$_yellow$*$_normal"; }

link() {
  local src="$1"
  local dst="$2"

  if [[ -L "$dst" ]]; then
    if [[ "$(readlink "$dst")" = "$src" ]]; then
      : # do nothing
    else
      ee -r rm "$dst"
      ee    ln -s "$src" "$dst"
    fi

  elif [[ -e "$dst" ]]; then
    red "$dst already exists"

  else
    ee ln -s "$src" "$dst"
  fi
}

if sed --version 2>/dev/null | grep -q GNU; then
  sed_i() {
    sed -i "$@"
  }
else
  sed_i() {
    sed -i '' "$@"
  }
fi

prepend() {
  local line="$1"
  local file="$2"
  if [[ -s "$file" ]]; then
    sed_i "1i $line" "$file"
  else
    append "$line" "$file"
  fi
}

append() {
  local line="$1"
  local file="$2"
  echo -e "$line" >> "$file"
}

prepend_with_space() {
  local line="$1"
  local file="$2"
  echo "prepend '$line' to $file"
  if [[ -s "$file" ]]; then
    prepend "$line\n" "$file"
  else
    prepend "$line" "$file"
  fi
}

append_with_space() {
  local line="$1"
  local file="$2"
  echo "append '$line' to $file"
  if [[ -s "$file" ]]; then
    append "\n$line" "$file"
  else
    append "$line" "$file"
  fi
}

_prepend_or_append_one() {
  local method="$1"
  local line="$2"
  local file="$3"

  local args=()

  if [[ -e "$file" ]]; then
    while read _line; do
      local lineno=${_line%%:*}
      args+=( -e ${lineno}d )
    done < <(grep -n "^$line$" "$file")
  fi

  # ファイル内に存在しない
  if ((${#args[@]} == 0)); then
    # 1行目 or 最終行に追加
    $method "$line" "$file"

  # ファイル内に存在する
  else
    local target
    if [[ "$method" = prepend_with_space ]]; then
      target=1
    else
      target="$(wc -l < "$file")"
      # Mac の wc -l は先頭にスペースが入るので削除する
      target="${target// /}"
    fi

    # 1行目 or 最終行だけにある場合
    if [[ "${args[*]}" = "-e ${target}d" ]]; then
      : # do nothing

    # 1行目以外、もしくは複数ある場合
    else
      # 全て削除
      sed_i "${args[@]}" "$file"
      # 1行目 or 最終行に追加
      $method "$line" "$file"
    fi
  fi
}

prepend_one() {
  local line="$1"
  local file="$2"
  _prepend_or_append_one prepend_with_space "$line" "$file"
}

append_one() {
  local line="$1"
  local file="$2"
  _prepend_or_append_one append_with_space "$line" "$file"
}




### Main {{{1

root="$(builtin cd "${BASH_SOURCE%/*}" && pwd)"
abbr_root="$(echo "$root" | sed "s@^$HOME@~@")"


## bin {{{2

if [[ ! -e ~/bin ]]; then
  ee mkdir ~/bin
fi

for file in $(ls "$root/bin"); do
  link "$root/bin/$file" ~/"bin/$file"
done


## dotfiles {{{2

for file in $(ls -A "$root/dotfiles"); do
  link "$root/dotfiles/$file" ~/"$file"
done


## bash {{{2

prepend_one "source $abbr_root/sh/env.sh"   ~/.bashrc
append_one  "source $abbr_root/bash/bashrc" ~/.bashrc

if [[ -e ~/.bash_profile ]]; then
  bash_profile=~/.bash_profile
else
  bash_profile=~/.profile
fi
append_one "source $abbr_root/bash/bash_profile" "$bash_profile"


## zsh {{{2

append_one "source $abbr_root/zsh/zshenv" ~/.zshenv
append_one "source $abbr_root/zsh/zshrc"  ~/.zshrc


## misc {{{2

if [[ ! -e ~/tmp ]]; then
  ee mkdir ~/tmp
fi
chmod 0700 ~/tmp
